<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.liveshow.dao.DarkroomRoomMapper">
	<resultMap id="BaseResultMap" type="org.liveshow.entity.DarkroomRoom">
		<constructor>
			<idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
			<arg column="room_id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
			<arg column="reason" jdbcType="VARCHAR" javaType="java.lang.String"/>
			<arg column="hours" jdbcType="INTEGER" javaType="java.lang.Integer"/>
			<arg column="time" jdbcType="INTEGER" javaType="java.lang.Integer"/>
			<arg column="photo" jdbcType="VARCHAR" javaType="java.lang.String"/>
			<arg column="state" jdbcType="BIT" javaType="java.lang.Boolean"/>
			<arg column="manager_id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
		</constructor>
	</resultMap>

	<resultMap id="DarkRoomInfos" type="org.liveshow.entity.CombinationEntity.DarkRoomInfo">
		<id property="id" column="id"/>
		<result property="roomId" column="room_id"/>
		<result property="reason" column="reason"/>
		<result property="hours" column="hours"/>
		<result property="time" column="time"/>
		<result property="photo" column="photo"/>
		<result property="nickName" column="nick_name"/>
	</resultMap>

	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")"
									         separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")"
									         separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
    id, room_id, reason, hours, time, photo, state, manager_id
  </sql>
	<select id="selectByExample" resultMap="BaseResultMap" parameterType="org.liveshow.entity.DarkroomRoomExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List"/>
		from darkroom_room
		<if test="_parameter != null">
			<include refid="Example_Where_Clause"/>
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List"/>
		from darkroom_room
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from darkroom_room
    where id = #{id,jdbcType=INTEGER}
  </delete>
	<delete id="deleteByExample" parameterType="org.liveshow.entity.DarkroomRoomExample">
		delete from darkroom_room
		<if test="_parameter != null">
			<include refid="Example_Where_Clause"/>
		</if>
	</delete>
	<insert id="insert" parameterType="org.liveshow.entity.DarkroomRoom">
    insert into darkroom_room (id, room_id, reason, 
      hours, time, photo, 
      state, manager_id)
    values (#{id,jdbcType=INTEGER}, #{roomId,jdbcType=INTEGER}, #{reason,jdbcType=VARCHAR}, 
      #{hours,jdbcType=INTEGER}, #{time,jdbcType=INTEGER}, #{photo,jdbcType=VARCHAR}, 
      #{state,jdbcType=BIT}, #{managerId,jdbcType=INTEGER})
  </insert>
	<insert id="insertSelective" parameterType="org.liveshow.entity.DarkroomRoom">
		insert into darkroom_room
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="roomId != null">
				room_id,
			</if>
			<if test="reason != null">
				reason,
			</if>
			<if test="hours != null">
				hours,
			</if>
			<if test="time != null">
				time,
			</if>
			<if test="photo != null">
				photo,
			</if>
			<if test="state != null">
				state,
			</if>
			<if test="managerId != null">
				manager_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="roomId != null">
				#{roomId,jdbcType=INTEGER},
			</if>
			<if test="reason != null">
				#{reason,jdbcType=VARCHAR},
			</if>
			<if test="hours != null">
				#{hours,jdbcType=INTEGER},
			</if>
			<if test="time != null">
				#{time,jdbcType=INTEGER},
			</if>
			<if test="photo != null">
				#{photo,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				#{state,jdbcType=BIT},
			</if>
			<if test="managerId != null">
				#{managerId,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="org.liveshow.entity.DarkroomRoomExample" resultType="java.lang.Integer">
		select count(*) from darkroom_room
		<if test="_parameter != null">
			<include refid="Example_Where_Clause"/>
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update darkroom_room
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.roomId != null">
				room_id = #{record.roomId,jdbcType=INTEGER},
			</if>
			<if test="record.reason != null">
				reason = #{record.reason,jdbcType=VARCHAR},
			</if>
			<if test="record.hours != null">
				hours = #{record.hours,jdbcType=INTEGER},
			</if>
			<if test="record.time != null">
				time = #{record.time,jdbcType=INTEGER},
			</if>
			<if test="record.photo != null">
				photo = #{record.photo,jdbcType=VARCHAR},
			</if>
			<if test="record.state != null">
				state = #{record.state,jdbcType=BIT},
			</if>
			<if test="record.managerId != null">
				manager_id = #{record.managerId,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause"/>
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update darkroom_room
		set id = #{record.id,jdbcType=INTEGER},
		room_id = #{record.roomId,jdbcType=INTEGER},
		reason = #{record.reason,jdbcType=VARCHAR},
		hours = #{record.hours,jdbcType=INTEGER},
		time = #{record.time,jdbcType=INTEGER},
		photo = #{record.photo,jdbcType=VARCHAR},
		state = #{record.state,jdbcType=BIT},
		manager_id = #{record.managerId,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause"/>
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="org.liveshow.entity.DarkroomRoom">
		update darkroom_room
		<set>
			<if test="roomId != null">
				room_id = #{roomId,jdbcType=INTEGER},
			</if>
			<if test="reason != null">
				reason = #{reason,jdbcType=VARCHAR},
			</if>
			<if test="hours != null">
				hours = #{hours,jdbcType=INTEGER},
			</if>
			<if test="time != null">
				time = #{time,jdbcType=INTEGER},
			</if>
			<if test="photo != null">
				photo = #{photo,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=BIT},
			</if>
			<if test="managerId != null">
				manager_id = #{managerId,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.liveshow.entity.DarkroomRoom">
    update darkroom_room
    set room_id = #{roomId,jdbcType=INTEGER},
      reason = #{reason,jdbcType=VARCHAR},
      hours = #{hours,jdbcType=INTEGER},
      time = #{time,jdbcType=INTEGER},
      photo = #{photo,jdbcType=VARCHAR},
      state = #{state,jdbcType=BIT},
      manager_id = #{managerId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

	<select id="isDarkRoom" resultType="org.liveshow.entity.DarkroomRoom">
    SELECT *
    FROM darkroom_room a
    WHERE
    	a.room_id = #{roomId}
    AND a.time + a.hours > unix_timestamp(now())
  </select>

	<select id="selectDarkRoomByManagerDarkroomRoom"
	        resultType="org.liveshow.entity.CombinationEntity.ManagerDarkroomRoom">
		SELECT
		dr.id "darkroomRoomId",
		u.nick_name "nickName",
		a.real_name "realName",
		r.id "roomId",
		m.id "moduleId",
		m.name "moduleName",
		dr.reason "reason",
		dr.photo "photo",
		dr.time "startTime",
		dr.hours "duration",
		dr.state "state",
		operate.nick_name "operateName"
		FROM
		darkroom_room dr,
		room r,
		`user` u,
		`user` operate,
		application a,
		`module` m
		<where>
			dr.room_id = r.id
			AND
			r.user_id = u.id
			AND
			r.module_id = m.id
			AND
			a.user_id = u.id
			AND
			a.pass_state = 1
			AND
			dr.manager_id = operate.id
			<if test="moduleId != 0">
				AND
				m.id = #{moduleId}
			</if>
			AND
			dr.time > #{startTime}
			<if test="endTime != 0">
				AND
				#{endTime} > dr.time + dr.hours
			</if>
			<if test="state == true">
				AND
				(
				dr.time + dr.hours &lt; unix_timestamp(now())
				OR
				dr.state = 1
				)
			</if>
			<if test="state == false">
				AND
				dr.time + dr.hours > unix_timestamp(now())
				AND
				dr.state = 0
			</if>
		</where>
	</select>

	<select id="countDarkRoomNumByModule" resultType="org.liveshow.entity.CombinationEntity.ManagerDarkroomNumByModule">
    	SELECT
			m.id "moduleId",
			m.`name` "name",
			IFNULL(tmp.value, 0) "value"
		FROM
			module m
		LEFT JOIN (
			SELECT
				r.module_id,
				COUNT(*) value
			FROM
				darkroom_room dr
			LEFT JOIN room r ON dr.room_id = r.id
			WHERE
				dr.time + dr.hours > unix_timestamp(now())
			AND dr.state = 0
			GROUP BY
				dr.room_id
		) tmp ON tmp.module_id = m.id
		GROUP BY
			m.`name`
	</select>

	<select id="countDarkRoomNumByDate" resultType="org.liveshow.entity.CombinationEntity.ManagerDarkroomNumByDate">
		SELECT
			DATE_FORMAT(
				DATE_ADD(NOW(), INTERVAL #{i} DAY),
				'%Y-%m-%d'
			) "date",
			COUNT(*) 'num'
		FROM
			darkroom_room dd
		WHERE
			DATE_FORMAT(
				from_unixtime(dd.time),
				'%Y-%m-%d'
			) = DATE_FORMAT(
				DATE_ADD(NOW(), INTERVAL #{i} DAY),
				'%Y-%m-%d'
			)
	</select>

	<select id="selectDarkRoomInfo" resultMap="DarkRoomInfos">
    SELECT a.id AS id, a.room_id AS room_id, a.reason AS reason, a.hours AS hours, a.time AS time, a.photo AS photo, c.nick_name AS nick_name
    FROM darkroom_room AS a, room AS b, USER AS c
    WHERE a.state = 0 AND a.room_id = b.id AND b.user_id = c.id AND time &lt; 9999999999 AND time &gt; 1 ORDER BY TIME DESC;
  </select>

	<select id="selectDarkRoomInfoByNickName" resultType="org.liveshow.entity.CombinationEntity.DarkRoomInfo">
    SELECT a.id AS id, a.room_id AS roomId, a.reason AS reason, a.hours AS hours, a.time AS time, a.photo AS photo, c.nick_name AS nickName
    FROM darkroom_room AS a, room AS b, USER AS c
    WHERE a.room_id = b.id AND b.user_id = c.id AND c.nick_name = #{nickName};
  </select>

	<update id="updateDarkRoomState">
    UPDATE darkroom_room SET state = 1, manager_id = #{managerId} WHERE id = #{id};
  </update>

</mapper>
